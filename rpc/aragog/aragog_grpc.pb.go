// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: aragog/aragog.proto

package aragog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AragogClient is the client API for Aragog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AragogClient interface {
	HealthCheck(ctx context.Context, in *HealthReq, opts ...grpc.CallOption) (*HealthResp, error)
	InviteUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*InviteResp, error)
	RemoveUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*RemoveResp, error)
}

type aragogClient struct {
	cc grpc.ClientConnInterface
}

func NewAragogClient(cc grpc.ClientConnInterface) AragogClient {
	return &aragogClient{cc}
}

func (c *aragogClient) HealthCheck(ctx context.Context, in *HealthReq, opts ...grpc.CallOption) (*HealthResp, error) {
	out := new(HealthResp)
	err := c.cc.Invoke(ctx, "/github.com.scaletrade.aragog.Aragog/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aragogClient) InviteUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*InviteResp, error) {
	out := new(InviteResp)
	err := c.cc.Invoke(ctx, "/github.com.scaletrade.aragog.Aragog/InviteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aragogClient) RemoveUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*RemoveResp, error) {
	out := new(RemoveResp)
	err := c.cc.Invoke(ctx, "/github.com.scaletrade.aragog.Aragog/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AragogServer is the server API for Aragog service.
// All implementations must embed UnimplementedAragogServer
// for forward compatibility
type AragogServer interface {
	HealthCheck(context.Context, *HealthReq) (*HealthResp, error)
	InviteUser(context.Context, *UserReq) (*InviteResp, error)
	RemoveUser(context.Context, *UserReq) (*RemoveResp, error)
	mustEmbedUnimplementedAragogServer()
}

// UnimplementedAragogServer must be embedded to have forward compatible implementations.
type UnimplementedAragogServer struct {
}

func (UnimplementedAragogServer) HealthCheck(context.Context, *HealthReq) (*HealthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedAragogServer) InviteUser(context.Context, *UserReq) (*InviteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUser not implemented")
}
func (UnimplementedAragogServer) RemoveUser(context.Context, *UserReq) (*RemoveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedAragogServer) mustEmbedUnimplementedAragogServer() {}

// UnsafeAragogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AragogServer will
// result in compilation errors.
type UnsafeAragogServer interface {
	mustEmbedUnimplementedAragogServer()
}

func RegisterAragogServer(s grpc.ServiceRegistrar, srv AragogServer) {
	s.RegisterService(&Aragog_ServiceDesc, srv)
}

func _Aragog_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AragogServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.scaletrade.aragog.Aragog/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AragogServer).HealthCheck(ctx, req.(*HealthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aragog_InviteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AragogServer).InviteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.scaletrade.aragog.Aragog/InviteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AragogServer).InviteUser(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aragog_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AragogServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.scaletrade.aragog.Aragog/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AragogServer).RemoveUser(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Aragog_ServiceDesc is the grpc.ServiceDesc for Aragog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Aragog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.scaletrade.aragog.Aragog",
	HandlerType: (*AragogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _Aragog_HealthCheck_Handler,
		},
		{
			MethodName: "InviteUser",
			Handler:    _Aragog_InviteUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _Aragog_RemoveUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aragog/aragog.proto",
}
